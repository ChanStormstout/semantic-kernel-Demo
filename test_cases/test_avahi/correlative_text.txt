avahi_text1 = """
Analyze the following code:
AvahiKey* avahi_dns_packet_consume_key(AvahiDnsPacket *p, int *ret_unicast_response) {
    char name[256];
    uint16_t type, class;
    AvahiKey *k;

    assert(p);

    if (avahi_dns_packet_consume_name(p, name, sizeof(name)) < 0 ||
        avahi_dns_packet_consume_uint16(p, &type) < 0 ||
        avahi_dns_packet_consume_uint16(p, &class) < 0)
        return NULL;

    if (ret_unicast_response)
        *ret_unicast_response = !!(class & AVAHI_DNS_UNICAST_RESPONSE);

    class &= ~AVAHI_DNS_UNICAST_RESPONSE;

    if (!(k = avahi_key_new(name, class, type)))
        return NULL;

    if (!avahi_key_is_valid(k)) {
        avahi_key_unref(k);
        return NULL;
    }

    return k;
}
"""
avahi_text2 = """
Here are some other code snippets from the same project:

#define AVAHI_DNS_PACKET_EXTRA_SIZE 48

AvahiDnsPacket* avahi_dns_packet_new(unsigned mtu) {
    AvahiDnsPacket *p;
    size_t max_size;

    if (mtu <= 0)
        max_size = AVAHI_DNS_PACKET_SIZE_MAX;
    else if (mtu >= AVAHI_DNS_PACKET_EXTRA_SIZE)
        max_size = mtu - AVAHI_DNS_PACKET_EXTRA_SIZE;
    else
        max_size = 0;

    if (max_size < AVAHI_DNS_PACKET_HEADER_SIZE)
        max_size = AVAHI_DNS_PACKET_HEADER_SIZE;

    if (!(p = avahi_malloc(sizeof(AvahiDnsPacket) + max_size)))
        return p;

    p->size = p->rindex = AVAHI_DNS_PACKET_HEADER_SIZE;
    p->max_size = max_size;
    p->res_size = 0;
    p->name_table = NULL;
    p->data = NULL;

    memset(AVAHI_DNS_PACKET_DATA(p), 0, p->size);
    return p;
}

void avahi_dns_packet_free(AvahiDnsPacket *p) {
    assert(p);

    if (p->name_table)
        avahi_hashmap_free(p->name_table);

    avahi_free(p);
}

Generate a function called LLVMFuzzerTestOneInput,which accpets a `const uint8_t*` (called data)and a `size_t` parameter as the inputs, 
and be able to invoke the function `avahi_dns_packet_consume_key()`;
other information:
#define AVAHI_DNS_PACKET_DATA(p) ((p)->data ? (p)->data : ((uint8_t*) p) + sizeof(AvahiDnsPacket))

Due to the fact that the input may not be as the same type as the input parameter, you may need to use memcpy and AVAHI_DNS_PACKET_DATA to transform the data variable to the packet.
"""